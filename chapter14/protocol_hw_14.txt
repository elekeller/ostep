elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ gcc -g null.c -o
null
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ ./null
Segmentation fault
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ gdb null
GNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git
Copyright (C) 2021 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
--Type <RET> for more, q to quit, c to continue without paging--run
Type "apropos word" to search for commands related to "word"...
Reading symbols from null...
(gdb) run
Starting program: /mnt/c/ostep/chapter14/null

Program received signal SIGSEGV, Segmentation fault.
0x0000555555555149 in main () at null.c:7
7           printf("%d", *x); // segmentation fault
(gdb) q
A debugging session is active.

        Inferior 1 [process 314] will be killed.

Quit anyway? (y or n) y
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ valgrind ./null
==318== Memcheck, a memory error detector
==318== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==318== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==318== Command: ./null
==318==
==318== Invalid read of size 4
==318==    at 0x109149: main (null.c:7)
==318==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==318==
==318==
==318== Process terminating with default action of signal 11 (SIGSEGV)
==318==  Access not within mapped region at address 0x0
==318==    at 0x109149: main (null.c:7)
==318==  If you believe this happened as a result of a stack
==318==  overflow in your program's main thread (unlikely but
==318==  possible), you can try to increase the size of the
==318==  main thread stack using the --main-stacksize= flag.
==318==  The main thread stack size used in this run was 8388608.
==318==
==318== HEAP SUMMARY:
==318==     in use at exit: 0 bytes in 0 blocks
==318==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==318==
==318== All heap blocks were freed -- no leaks are possible
==318==
==318== For lists of detected and suppressed errors, rerun with: -s
==318== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ valgrind ./null -
-leak-check=yes
==319== Memcheck, a memory error detector
==319== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==319== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==319== Command: ./null --leak-check=yes
==319==
==319== Invalid read of size 4
==319==    at 0x109149: main (null.c:7)
==319==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==319==
==319==
==319== Process terminating with default action of signal 11 (SIGSEGV)
==319==  Access not within mapped region at address 0x0
==319==    at 0x109149: main (null.c:7)
==319==  If you believe this happened as a result of a stack
==319==  overflow in your program's main thread (unlikely but
==319==  possible), you can try to increase the size of the
==319==  main thread stack using the --main-stacksize= flag.
==319==  The main thread stack size used in this run was 8388608.
==319==
==319== HEAP SUMMARY:
==319==     in use at exit: 0 bytes in 0 blocks
==319==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==319==
==319== All heap blocks were freed -- no leaks are possible
==319==
==319== For lists of detected and suppressed errors, rerun with: -s
==319== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ gcc -g nofree.c -o nofree
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ gdb nofree
GNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git
Copyright (C) 2021 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
--Type <RET> for more, q to quit, c to continue without paging--run
Type "apropos word" to search for commands related to "word"...
Reading symbols from nofree...
(gdb) run
Starting program: /mnt/c/ostep/chapter14/nofree
[Inferior 1 (process 339) exited normally]                                          >>> gdb doesn't monitor what's going on with the memory
(gdb) q
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ valgrind ./nofree
 --leak-check=yes
==343== Memcheck, a memory error detector
==343== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==343== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==343== Command: ./nofree --leak-check=yes
==343==
==343==
==343== HEAP SUMMARY:
==343==     in use at exit: 9 bytes in 1 blocks
==343==   total heap usage: 1 allocs, 0 frees, 9 bytes allocated
==343==
==343== LEAK SUMMARY:
==343==    definitely lost: 9 bytes in 1 blocks
==343==    indirectly lost: 0 bytes in 0 blocks
==343==      possibly lost: 0 bytes in 0 blocks
==343==    still reachable: 0 bytes in 0 blocks
==343==         suppressed: 0 bytes in 0 blocks
==343== Rerun with --leak-check=full to see details of leaked memory
==343==
==343== For lists of detected and suppressed errors, rerun with: -s
==343== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ gcc -g data.c -o data
data.c: In function 'main':
data.c:9:5: error: expected expression before 'return'
    9 |     return 0;
      |     ^~~~~~
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ gcc -g data.c -o data
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ val
valgrind            valgrind-listener   validlocale
valgrind-di-server  valgrind.bin
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ valgrind ./data -
-leak-check=yes
==351== Memcheck, a memory error detector
==351== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==351== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==351== Command: ./data --leak-check=yes
==351==
==351== Invalid write of size 4
==351==    at 0x109155: main (data.c:8)
==351==  Address 0x4a171d0 is 0 bytes after a block of size 400 alloc'd
==351==    at 0x483877F: malloc (vg_replace_malloc.c:307)
==351==    by 0x109146: main (data.c:7)
==351==
==351==
==351== HEAP SUMMARY:
==351==     in use at exit: 400 bytes in 1 blocks
==351==   total heap usage: 1 allocs, 0 frees, 400 bytes allocated
==351==
==351== LEAK SUMMARY:
==351==    definitely lost: 400 bytes in 1 blocks
==351==    indirectly lost: 0 bytes in 0 blocks
==351==      possibly lost: 0 bytes in 0 blocks
==351==    still reachable: 0 bytes in 0 blocks
==351==         suppressed: 0 bytes in 0 blocks
==351== Rerun with --leak-check=full to see details of leaked memory
==351==
==351== For lists of detected and suppressed errors, rerun with: -s
==351== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
elias@DESKTOP-UTJTMPG:/mnt/c/ostep/chapter14$ make funnyfree
cc     funnyfree.c   -o funnyfree
funnyfree.c: In function 'main':
funnyfree.c:8:11: warning: passing argument 1 of 'free' makes pointer from integer without a cast [-Wint-conversion]
    8 |     free(i[2]);
      |          ~^~~
      |           |
      |           int
In file included from funnyfree.c:3:
/usr/include/stdlib.h:565:25: note: expected 'void *' but argument is of type 'int'
  565 | extern void free (void *__ptr) __THROW;
      |                   ~~~~~~^~~~~                                                   >>> this is so dumb that even the compiler notices there's something
                                                                                            wrong