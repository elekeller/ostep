Address translation:

C code:                 Assembly:

void func()
{
    int x = 3000;
    ...
    x += 3;             128 : movl 0x0(%ebx), %eax ; load 0+ebx into eax
                        132 : addl $0x03, %eax ; add 3 to eax register
                        135 : movl %eax, 0x0(%ebx) ; store eax back to mem
}

Program's memory:                               Real Memory:

0KB  ___________________                        0KB  ___________________
    |   movl...         | <- Base Register          | Operating System  |
    |   addl...         |                           |                   |
    |   movl...         |                           |___________________|
    |   Program code    |                           |   (not in use)    |
    |___________________|                           |___________________|________
    |       Heap        |                           |_______code________|   R   P
    |___________________|                           |_______heap________|   E   R
    |        |          |                           |         |         |   L   O
    |  heap  V          |                           |         V         |   O   C
    |                   |                           |  (allocated but   |   C   E
    |      (free)       |                           |    not in use)    |   A   S
    |                   |                           |         ^         |   T   S
    |  stack ^          |                           |_________|_________|   E
    |________|__________|                           |_______stack_______|___D____
    |                   |                           |                   |
    |       Stack       |                           |   (not in use)    |
16KB|___________________| <- Bounds Regiser     64KB|___________________|

for the program, it looks like                  ...when in reality, it's
it's using the whole memory...                  using  just  a  fragment

Limited Direct Execution (LDE):
- let the program run directly on the hardware for the most part
- at certain key points (System call/Timer interrupt), OS gets involved

now, let's extend this with...

(HARDWARE-BASED) ADDRESS TRANSLATION:
- hardware transforms each memory access by changing the virtual address
to the physical address
- on each and every memory reference, an address translation is performed
- OS also has to manage memory as the hardware just provides the basic
mechanisms for virtualization

Assumptions (unrealistic, will be relaxed step by step):
- user's address space must be placed contiuously in memory (no gaps)
- size of the address space is smaller than the size of the physical memory
- each address space has the same size

physical address = virtual address + base

DYNAMIC RELOCATION (hardware based address translation):
- realized by adding a pair of registers for base and bounds in the
MEMORY MANAGEMENT UNIT of the CPU
- the hardware will add the base value to the virtual addr.
from the program when it wants to load/store something
- we also need one bit for storing if we are currently in KERNEL or USER MODE
(perhaps in some kind of processor status word)
- we also need to be able to RAISE AN EXCEPTION if a program tries to
access privileged instructions or memory that is out of its bounds
- we also need to be able to handle these Exceptions -> Exception Handlers also
need to be stored somewehere (it will Probably terminate this process)
- the OS needs to be able to update the base/bounds values before it lets a
program run